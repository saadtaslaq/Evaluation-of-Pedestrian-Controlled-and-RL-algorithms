# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from frame_msgs/DetectedPerson.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class DetectedPerson(genpy.Message):
  _md5sum = "8ad5b83c32a1fa6e227e3c2da966bc82"
  _type = "frame_msgs/DetectedPerson"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Message describing a detection of a person
#

# Unique id of the detection, monotonically increasing over time
uint64          detection_id

# (Pseudo-)probabilistic value between 0.0 and 1.0 describing the detector's confidence in the detection
float64         confidence

# 3D pose (position + orientation) of the *center* of the detection
# check covariance to see which dimensions are actually set! unset dimensions shall have a covariance > 9999
geometry_msgs/PoseWithCovariance    pose

# height of detected person in 3D (in meters)
float64 height

# 2D bbox position (x and y is the top-left corner, width, height) 
float64 bbox_x
float64 bbox_y
float64 bbox_w
float64 bbox_h

# Sensor modality / detector type, see example constants below. 
# used e.g. later in tracking to check which tracks have been visually confirmed
string          modality            

                                    
string          MODALITY_GENERIC_LASER_2D = laser2d
string          MODALITY_GENERIC_LASER_3D = laser3d
string          MODALITY_GENERIC_MONOCULAR_VISION = mono
string          MODALITY_GENERIC_STEREO_VISION = stereo
string          MODALITY_GENERIC_RGBD = rgbd

# ReID output
float32[] embed_vector

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  MODALITY_GENERIC_LASER_2D = 'laser2d'
  MODALITY_GENERIC_LASER_3D = 'laser3d'
  MODALITY_GENERIC_MONOCULAR_VISION = 'mono'
  MODALITY_GENERIC_STEREO_VISION = 'stereo'
  MODALITY_GENERIC_RGBD = 'rgbd'

  __slots__ = ['detection_id','confidence','pose','height','bbox_x','bbox_y','bbox_w','bbox_h','modality','embed_vector']
  _slot_types = ['uint64','float64','geometry_msgs/PoseWithCovariance','float64','float64','float64','float64','float64','string','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       detection_id,confidence,pose,height,bbox_x,bbox_y,bbox_w,bbox_h,modality,embed_vector

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectedPerson, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.detection_id is None:
        self.detection_id = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseWithCovariance()
      if self.height is None:
        self.height = 0.
      if self.bbox_x is None:
        self.bbox_x = 0.
      if self.bbox_y is None:
        self.bbox_y = 0.
      if self.bbox_w is None:
        self.bbox_w = 0.
      if self.bbox_h is None:
        self.bbox_h = 0.
      if self.modality is None:
        self.modality = ''
      if self.embed_vector is None:
        self.embed_vector = []
    else:
      self.detection_id = 0
      self.confidence = 0.
      self.pose = geometry_msgs.msg.PoseWithCovariance()
      self.height = 0.
      self.bbox_x = 0.
      self.bbox_y = 0.
      self.bbox_w = 0.
      self.bbox_h = 0.
      self.modality = ''
      self.embed_vector = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Q8d().pack(_x.detection_id, _x.confidence, _x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.pose.covariance))
      _x = self
      buff.write(_get_struct_5d().pack(_x.height, _x.bbox_x, _x.bbox_y, _x.bbox_w, _x.bbox_h))
      _x = self.modality
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.embed_vector)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.embed_vector))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.detection_id, _x.confidence, _x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w,) = _get_struct_Q8d().unpack(str[start:end])
      start = end
      end += 288
      self.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 40
      (_x.height, _x.bbox_x, _x.bbox_y, _x.bbox_w, _x.bbox_h,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.modality = str[start:end].decode('utf-8')
      else:
        self.modality = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.embed_vector = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Q8d().pack(_x.detection_id, _x.confidence, _x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w))
      buff.write(self.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_5d().pack(_x.height, _x.bbox_x, _x.bbox_y, _x.bbox_w, _x.bbox_h))
      _x = self.modality
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.embed_vector)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.embed_vector.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.detection_id, _x.confidence, _x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w,) = _get_struct_Q8d().unpack(str[start:end])
      start = end
      end += 288
      self.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 40
      (_x.height, _x.bbox_x, _x.bbox_y, _x.bbox_w, _x.bbox_h,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.modality = str[start:end].decode('utf-8')
      else:
        self.modality = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.embed_vector = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_Q8d = None
def _get_struct_Q8d():
    global _struct_Q8d
    if _struct_Q8d is None:
        _struct_Q8d = struct.Struct("<Q8d")
    return _struct_Q8d
